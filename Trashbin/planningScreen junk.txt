
				{/* <HeaderBar/> */}
				{/* <Animated.View
					style={{
					transform: [{translateX: pan.x}, {translateY: pan.y}],
					}}
					{...panResponder.panHandlers}>
				</Animated.View> */}
				{/* <ScrollView style={styles.scrollingList}> */}
				
					{/* onPress={setStartScrolling(true)} waitFor={startScrolling} */}
					{/* onPress={} onScroll={} onScroll={setUnlockScroll(true)} waitFor={}*/}
					{/* <View style={styles.items}>
						<ToDoListItems2
							tasks       = {gaps       } 
							setTasks    = {setGaps    }
							// tasks       = {tasks      } 
							// setTasks    = {setTasks   } 
							modified    = {modified   } 
							setModified = {setModified}
							sync        = {sync       }
							setSync     = {setSync    }
						/>
					</View> */}
					
					{/* <View style={{
						width:  '100%',
						// height: '100%',
						height: 100000,
						backgroundColor: 'transparent',
						position: 'absolute',
						zIndex: -10,
					}} /> */}
					
						{/* <ToDoListItems2
							tasks       = {plannedGaps   } 
							// setTasks    = {setPlannedGaps}
							// tasks       = {tasks      } 
							// setTasks    = {setTasks   } 
							// modified    = {modified   } 
							// setModified = {setModified}
							// sync        = {sync       }
							// setSync     = {setSync    }
						/> */}

						{/* <View style={{
							width:  '100%',
							// height: '100%',
							height: 100000,
							backgroundColor: 'transparent',
							position: 'absolute',
							zIndex: 1,
						}} /> */}
						{/* <ToDoListItems
							tasks           = {tasks          } 
							setTasks        = {setTasks       } 
							modified        = {modified       } 
							setModified     = {setModified    } 
							setReload       = {setReload      }
							setGaps         = {setGaps        }
							setReplan       = {setReplan      }
							setPlannedGaps  = {setPlannedGaps }
							setSync         = {setSync        } 
							setUnlockScroll = {setUnlockScroll}
							sync            = {sync           }
						/> */}

						{/* <View style={{
							width:  '100%',
							height: '100%',
							backgroundColor: 'transparent',
							position: 'absolute',
							zIndex: 1,
						}} /> */}

				{/* <ScrollView style={styles.scrollingList} scrollEnabled={unlockScroll}>
					<View style={styles.items}>
						{plannedGaps.map((task, i) => ( 
							<View key={i}>
								<ToDoListItem2 task={task} />
							</View> 
						))}
					</View>
					<View style={styles.items}>
						{tasks.map((task, i) => ( 
							<View key={i}> 
								<ToDoListItem9
									tasks=           {tasks}
									taskId=          {i}
									task=            {task}
									setModified=     {setModified}
									setTasks=        {setTasks}
									setReload=       {setReload}
									setGaps=         {setGaps}
									setReplan=       {setReplan}
									setPlannedGaps=  {setPlannedGaps}
									setUnlockScroll= {setUnlockScroll}
									sync=            {sync}
								/> 
							</View> 
						))}
					</View>
				</ScrollView> */}

// const ToDoListItems = ({tasks, setTasks, setModified, setReload, setGaps, setReplan, setPlannedGaps, setUnlockScroll, sync}) => {
// 	const n = tasks.length;
// 	return [...Array(n)].map((e, i) =>
// 		<View key={i}>
// 			<ToDoListItem 
// 				tasks           = { tasks           }
// 				taskId          = { i               }
// 				task            = { tasks[i]        }
// 				setModified     = { setModified     }
// 				setTasks        = { setTasks        }
// 				setReload       = { setReload       }
// 				setGaps         = { setGaps         }
// 				setReplan       = { setReplan       }
// 				setPlannedGaps  = { setPlannedGaps  }
// 				setUnlockScroll = { setUnlockScroll }
// 				sync            = { sync            }
// 			/>
// 		</View>
// 	);
// }

// Here is a possible way to rewrite the code snippet you provided:

// ```javascript

//chat GPT rewritten snippet
// const ToDoListItems = ({tasks, setTasks, setModified, setReload, setGaps, setReplan, setPlannedGaps, setUnlockScroll, sync}) => {
//   return tasks.map((task, i) => (
//     <View key={i}>
//       <ToDoListItem
//         tasks=           {tasks}
//         taskId=          {i}
//         task=            {task}
//         setModified=     {setModified}
//         setTasks=        {setTasks}
//         setReload=       {setReload}
//         setGaps=         {setGaps}
//         setReplan=       {setReplan}
//         setPlannedGaps=  {setPlannedGaps}
//         setUnlockScroll= {setUnlockScroll}
//         sync=            {sync}
//       />
//     </View>
//   ))
// };

// ```

// I hope this helps! Let me know if you have any other questions.

// Source: Conversation with Bing, 6/6/2023(1) How to Write Cleaner React Code - freeCodeCamp.org. https://www.freecodecamp.org/news/how-to-write-cleaner-react-code/ Accessed 6/6/2023.
// (2) React Getting Started - W3Schools. https://www.w3schools.com/react/react_getstarted.asp Accessed 6/6/2023.
// (3) Building a React code editor and syntax highlighter from scratch. https://blog.logrocket.com/building-react-code-editor-syntax-highlighter/ Accessed 6/6/2023.

// const ToDoListItems2 = ({tasks, setTasks, setModified, sync}) => {
// 	const n = tasks.length;
// 	return [...Array(n)].map((e, i) =>
// 		<View key={i}>
// 			<ToDoListItem2 
// 				task        = {tasks[i]   }
// 			/>
// 		</View>
// 	);
// }


// const ToDoListItems2 = ({tasks, setTasks, setModified, sync}) => {
// 	return tasks.map((task, i) => (
// 		<View key={i}>
// 			<ToDoListItem2 task={task} />
// 		</View>
// 	));
// }

// const ToDoListItems2 = ({tasks}) => {
// 	return tasks.map((task, i) => (
// 	  <View key={i}>
// 		<ToDoListItem2 task={task} />
// 	  </View>
// 	))
// };


//index the todo list to get the urgencies in order
//index the agenda to analyse it in start time order

//database
//  agenda
//    fixed meetings and events
//      absolute times (they may be obsolete, apart from repeated tasks)
//      planning settings
//      repeat settings
//    generated output, in order, contains empty spacers, empty spacers will be replaced with planned tasks, or breaks
//      relative times
//      source link in database

//to do: 
//  write dummy output in database
//  make a viewer
//  make it link to the agenda data for more info
//  make the info editable
//  make the time draggable and editable to modify both the output file and the source file
//  if a repeated event is changed, it will prompt like google agenda does and create a new source task with updated data for that event and depending on the chosen action, all repeated occurrences after that


// const ToDoListItem = ({tasks, taskId, task, setTasks, setModified, setReload, setGaps, setReplan, setPlannedGaps, setUnlockScroll, sync}) => {
// 	let duration  = task.duration;
// 	let startTime = task.startTime;
// 	// console.log("active");

// 	const pan = useRef(new Animated.ValueXY()).current;
// 	//if (pan.y==0) {pan.y = w;}
// 	// Animated.add(pan.x, v)
// 	// pan.setOffset(pan: {x: v; y: w});
// 	pan.setOffset({x: duration, y: startTime});

// 	// console.log("sync  check 1: ",sync);
// 	// console.log("sync2 check 1: ",sync2);

// 	const panResponder = useRef(
// 		PanResponder.create({
// 			// onPanResponderGrant: () => this.setState({ scroll: false }),
// 			onPanResponderGrant: () => setUnlockScroll(false),
// 			// onPanResponderGrant: () => unlockScroll = false,
// 			onMoveShouldSetPanResponder: () => true,
// 			onPanResponderMove: Animated.event([null, {dx: pan.x, dy: pan.y}], {useNativeDriver: false}),
// 			// onPanResponderTerminationRequest: () => {
// 			// 	return false
// 			// },
// 			onPanResponderRelease: () => {
// 				pan.extractOffset();
// 				// console.log("hi");
// 				// console.log(pan.x._offset, pan.y._offset);
// 				//saveAgendaTimes(pan.x._offset, pan.y._offset);
// 				// tasks[taskId].duration  = pan.x._offset;
// 				// tasks[taskId].startTime = pan.y._offset;
// 				//console.log("written");
// 				// saveAgendaTimes(tasks, sync);
// 				saveAgendaTimes(pan.x._offset, pan.y._offset, taskId, setTasks, setGaps, setReload, setPlannedGaps);
// 				//problem 1: when the page is visited the second time it won't load properly: all names are "loading" and it creates a new task, written in one write
// 				//problem 2: when there are two events, the second one gets its timings messed up
// 				// this.setState({ scroll: true });
// 				setUnlockScroll(true);
// 				// unlockScroll = true;
// 			},
// 			onPanResponderTerminate: () => {
// 				pan.extractOffset();
// 				saveAgendaTimes(pan.x._offset, pan.y._offset, taskId, setTasks, setGaps, setReload, setPlannedGaps);
// 				setUnlockScroll(true)
// 			},
// 		}),
// 	).current;

// 	// static add(a: Animated, b: Animated): AnimatedAddition;
// 	//pan.x v

// 	return (
// 		// <TouchableOpacity >
// 		<Animated.View
// 		//[styles.animatedBox,
// 		// onPress={()=>{setUnlockScroll(false)}}
// 			style={{
// 				// flex          : 0,
// 				//position:'absolute',
// 				position: 'absolute',
// 				height: pan.x,
// 				//height: v,
// 				// paddingBottom : pan.x,
// 				// top: w, 
// 				//translateY    : w,
// 				//marginTop: w,
// 				top: pan.y, 
// 				// top:0,
// 				bottom: 0,
// 				// top: w, bottom: w+x,
// 				left: 0, right: 0, 
// 				//width: 100%,
// 				//height: x,
// 				//paddingTop    : x,
// 				//paddingBottom : x,
// 				// translateY    : offset - 2*x,
// 				//translateY    : offset,
// 				//translateY    : this.state.mapViewOffset.y
// 				//padding          : x,0,
// 				//backgroundColor  : "gray",
// 				//backgroundColor  : 'grey',
// 				backgroundColor  : "#22f",
// 				borderColor      : "#222",
// 				borderWidth: 5,
// 				//paddingLeft: pan.x,
// 				//top : pan.y,
// 				//left: pan.x,
// 				//paddingTop    : x,
// 				//paddingBottom : x,
// 			}}{...panResponder.panHandlers}
// 			// style={[styles.animatedBox,{
// 			// 	paddingTop    : x,
// 			// 	paddingBottom : y,
// 			// 	// paddingLeft: pan.x,
// 			// 	//top : pan.y,
// 			// 	//left: pan.x,
// 			// }]}{...panResponder.panHandlers}
// 		>
// 			<View style={styles.scrollBlock}>
// 				<View style={styles.scrollItem}>
// 					<TextInput style={styles.scrollText} 
// 						value={task.name}
// 						type="text"
// 						name="name"
// 						placeholder= "task name"
// 						onChange={(e) => {
// 							tasks[taskId].name = e.target.value;
// 							setTasks   (tasks);
// 							setModified(true);
// 						}}
// 					/>
// 				</View>
// 				{/* <View> */}
// 					{/* bar */}
// 				{/* </View> */}
// 				{/* <View style={styles.scrollItem}>
// 					<TextInput style={styles.scrollText} 
// 						value={task.requiredTime}
// 						type="number"
// 						name="requiredTime"
// 						placeholder= "required time"
// 						onChange={(e) => {
// 							tasks[taskId].requiredTime = e.target.value;
// 							setTasks   (tasks);
// 							setModified(true);
// 						}}
// 					/>
// 				</View>
// 				<View style={styles.scrollItem}>
// 					<TextInput style={styles.scrollText} 
// 						value={task.deadline}
// 						type="number"
// 						name="deadline"
// 						placeholder= "deadline"
// 						onChange={(e) => {
// 							tasks[taskId].deadline = e.target.value;
// 							setTasks   (tasks);
// 							setModified(true);
// 						}}
// 					/>
// 				</View>
// 				<View style={styles.scrollItem}>
// 					<TextInput style={styles.scrollText} 
// 						value={task.priority}
// 						type="number"
// 						name="priority"
// 						placeholder= "priority"
// 						onChange={(e) => {
// 							tasks[taskId].priority = e.target.value;
// 							setTasks   (tasks);
// 							setModified(true);
// 						}}
// 					/>
// 				</View>
// 				<View style={styles.scrollItem}>
// 					<TextInput style={styles.scrollText} 
// 						value={task.like}
// 						type="number"
// 						name="like"
// 						placeholder= "number"
// 						onChange={(e) => {
// 							tasks[taskId].like = e.target.value;
// 							setTasks   (tasks);
// 							setModified(true);
// 						}}
// 					/>
// 				</View>
// 				<View style={styles.scrollItem}>
// 					<Text style={styles.scrollText}>
// 						...
// 					</Text>
// 				</View> */}
// 				<TouchableOpacity style={styles.delete} onPress={() => {
// 					tasks.splice(taskId, 1);
// 					setTasks   (tasks);
// 					setReplan(true);
// 				}}/>
// 			</View>
// 		</Animated.View>
// 		// </TouchableOpacity>
// 	);
// }

// const ToDoListItemSelector = ({tasks, taskId, task, setTasks, setModified, setReload, setGaps, setReplan, setPlannedGaps, setUnlockScroll, sync, setScrollOffset, flatListRef}) => {
// 	if (task.type == "agenda"){
// 		ToDoListItem9 (tasks, taskId, task, setTasks, setModified, setReload, setGaps, setReplan, setPlannedGaps, setUnlockScroll, sync, setScrollOffset, flatListRef);
// 	} else if (task.type == "generated"){
// 		// ToDoListItem2 (task);
// 	} else if (task.type == ""){

// 	} else {

// 	}
// }